# -*- coding: utf-8 -*-
"""Taller_15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A_LJ_2O6O8HHxcNiurHa3V1HLLfz6yQs
"""

def gauss_jordan_elimination(matrix):
    n = len(matrix)

    for i in range(n):
        # Pivote parcial
        max_row = i
        for j in range(i + 1, n):
            if abs(matrix[j][i]) > abs(matrix[max_row][i]):
                max_row = j
        matrix[i], matrix[max_row] = matrix[max_row], matrix[i]

        # Hacer diagonal principal igual a 1
        divisor = matrix[i][i]
        for j in range(i, n + 1):
            matrix[i][j] /= divisor

        # Hacer ceros en las columnas debajo de la diagonal principal
        for j in range(n):
            if j != i:
                factor = matrix[j][i]
                for k in range(i, n + 1):
                    matrix[j][k] -= factor * matrix[i][k]

    return [row[-1] for row in matrix]

def solve_equations(coefficients, constants):
    n = len(constants)
    augmented_matrix = [coefficients[i] + [constants[i]] for i in range(n)]
    solutions = gauss_jordan_elimination(augmented_matrix)
    return solutions

# Sistema de ecuaciones
coefficients = [[2, 2, 0], [3, 3, 4], [4, 0, 1]]
constants = [10, 23, 30]

# Resolver el sistema de ecuaciones
solutions = solve_equations(coefficients, constants)
print("Soluciones:")
for i, sol in enumerate(solutions):
    print(f"x{i+1} =", sol)