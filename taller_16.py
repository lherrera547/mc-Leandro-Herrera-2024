# -*- coding: utf-8 -*-
"""Taller_16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vMqNxwCUpXI0vS9M3cfKT0NMWm8rKePl
"""

def imprimir_matriz(matriz):
    for fila in matriz:
        for elem in fila:
            print("{:.1f}".format(elem), end=" ")
        print()


def gauss_jordan(matriz):
    n = len(matriz)

    # Crear matriz identidad del mismo tamaño que la matriz original
    identidad = [[0] * n for _ in range(n)]
    for i in range(n):
        identidad[i][i] = 1

    # Eliminación hacia adelante
    for i in range(n):
        # Normalizar la fila i
        factor = matriz[i][i]
        for j in range(n):
            matriz[i][j] /= factor
            identidad[i][j] /= factor

        # Hacer ceros en todas las demás filas
        for k in range(n):
            if k != i:
                factor = matriz[k][i]
                for j in range(n):
                    matriz[k][j] -= factor * matriz[i][j]
                    identidad[k][j] -= factor * identidad[i][j]

    return identidad


def main():
    # Pedir al usuario el tamaño de la matriz

    n = int(input("Ingrese el tamaño de la matriz cuadrada (máximo 4): "))

    if n > 4:
        print("El tamaño máximo permitido es 4x4.")
        return

    # Pedir al usuario los elementos de la matriz
    print("Ingrese los elementos de la matriz por fila dejando espacio sin comas, solo espacio:")
    matriz = []
    for _ in range(n):
        fila = list(map(float, input().split()))
        if len(fila) != n:
            print(f"Debe ingresar {n} elementos.")
            return
        matriz.append(fila)

    # Encontrar la inversa usando Gauss-Jordan
    inversa = gauss_jordan(matriz)

    # Imprimir la inversa
    print("\nLa matriz inversa es:")
    imprimir_matriz(inversa)


if __name__ == "__main__":
    main()