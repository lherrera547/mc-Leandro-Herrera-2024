# -*- coding: utf-8 -*-
"""Taller_19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1903dHrplSsn6JHx6QF9mUNdu7IfwJzb6
"""

import numpy as np
import matplotlib.pyplot as plt

# Datos
x = np.array([1, 2, 3, 4, 5, 6, 7, 8])
y = np.array([4.3, 6.5, 7.5, 8, 8.5, 8.8, 9, 9.5])

# Regresión lineal
coefficients_linear = np.polyfit(x, y, 1)
a_linear, b_linear = coefficients_linear

# Graficar los datos y la regresión
plt.scatter(x, y, color='blue', label='Datos')
plt.plot(x, a_linear * x + b_linear, color='green', label=f'Regresión Lineal: y = {a_linear:.2f} * x + {b_linear:.2f}')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Regresión Lineal')
plt.legend()
plt.grid(True)
plt.show()
print("--------------------------------------------------------------------------------------------")
import numpy as np
import matplotlib.pyplot as plt

# Datos
x = np.array([1, 2, 3, 4, 5, 6, 7, 8])
y = np.array([4.3, 6.5, 7.5, 8, 8.5, 8.8, 9, 9.5])

# Regresión para la ecuación de potencias (y = a * x^b)
log_x = np.log(x)
log_y = np.log(y)
coefficients = np.polyfit(log_x, log_y, 1)
b, a = coefficients
a = np.exp(a)

# Graficar los datos y la regresión
plt.scatter(x, y, color='blue', label='Datos')
plt.plot(x, a * x ** b, color='red', label=f'Regresión: y = {a:.2f} * x^{b:.2f}')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Regresión de Potencias')
plt.legend()
plt.grid(True)
plt.show()

print("-----------------------------------------------------------------------------------------------")

import numpy as np
import matplotlib.pyplot as plt

# Datos
x = np.array([1, 2, 3, 4, 5, 6, 7, 8])
y = np.array([4.3, 6.5, 7.5, 8, 8.5, 8.8, 9, 9.5])

# Regresión para la razón de crecimiento (y = a * (1 + b)^x)
log_y = np.log(y)
coefficients = np.polyfit(x, log_y, 1)
a, b = coefficients
a = np.exp(a)

# Graficar los datos y la regresión
plt.scatter(x, y, color='blue', label='Datos')
plt.plot(x, a * (1 + b) ** x, color='red', label=f'Regresión: y = {a:.2f} * (1 + {b:.2f})^x')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Regresión de Razón de Crecimiento')
plt.legend()
plt.grid(True)
plt.show()

print("---------------------------------------------------------------------------------------------------------------------")

import numpy as np
import matplotlib.pyplot as plt

# Datos
x = np.array([1, 2, 3, 4, 5, 6, 7, 8])
y = np.array([4.3, 6.5, 7.5, 8, 8.5, 8.8, 9, 9.5])

# Regresión exponencial
log_y = np.log(y)
coefficients_exp = np.polyfit(x, log_y, 1)
a_exp, b_exp = coefficients_exp
a_exp = np.exp(a_exp)

# Graficar los datos y la regresión
plt.scatter(x, y, color='blue', label='Datos')
plt.plot(x, a_exp * np.exp(b_exp * x), color='orange', label=f'Regresión Exponencial: y = {a_exp:.2f} * e^({b_exp:.2f} * x)')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Regresión Exponencial')
plt.legend()
plt.grid(True)
plt.show()


print("------------------------------------------------------------------------------------------------------------")

import numpy as np
import matplotlib.pyplot as plt

# Datos
x = np.array([1, 2, 3, 4, 5, 6, 7, 8])
y = np.array([4.3, 6.5, 7.5, 8, 8.5, 8.8, 9, 9.5])

# Regresión lineal
coefficients_linear = np.polyfit(x, y, 1)
a_linear, b_linear = coefficients_linear

# Regresión exponencial
log_y = np.log(y)
coefficients_exp = np.polyfit(x, log_y, 1)
a_exp, b_exp = coefficients_exp
a_exp = np.exp(a_exp)

# Regresión para la ecuación de potencias
log_x = np.log(x)
coefficients_power = np.polyfit(log_x, log_y, 1)
b_power, a_power = coefficients_power
a_power = np.exp(a_power)

# Regresión para la razón de crecimiento
coefficients_growth = np.polyfit(x, log_y, 1)
a_growth, b_growth = coefficients_growth
a_growth = np.exp(a_growth)

# Graficar los datos y las regresiones
plt.scatter(x, y, color='blue', label='Datos')

plt.plot(x, a_linear * x + b_linear, color='green', label=f'Regresión Lineal: y = {a_linear:.2f} * x + {b_linear:.2f}')
plt.plot(x, a_exp * np.exp(b_exp * x), color='orange', label=f'Regresión Exponencial: y = {a_exp:.2f} * e^({b_exp:.2f} * x)')
plt.plot(x, a_power * x ** b_power, color='red', label=f'Regresión Potencias: y = {a_power:.2f} * x^{b_power:.2f}')
plt.plot(x, a_growth * (1 + b_growth) ** x, color='purple', label=f'Regresión Crecimiento: y = {a_growth:.2f} * (1 + {b_growth:.2f})^x')

plt.xlabel('x')
plt.ylabel('y')
plt.title('Comparación de Regresiones')
plt.legend()
plt.grid(True)
plt.show()