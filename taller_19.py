# -*- coding: utf-8 -*-
"""Taller_19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h9uD-ao9kvFu__dE8FPWfI6zLgu-ARGd
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

def potencia(x, a, b):
    return a * np.power(x, b)

def crecimiento(x, a, b):
    return a * (1 + b * x)


x_data = np.array([1, 2, 3, 4, 5, 6, 7, 8])
y_data = np.array([4.3, 6.5, 7.5, 8, 8.5, 8.8, 9, 9.5])

params_potencia, _ = curve_fit(potencia, x_data, y_data)
params_crecimiento, _ = curve_fit(crecimiento, x_data, y_data)

y_pred_potencia = potencia(x_data, *params_potencia)
y_pred_crecimiento = crecimiento(x_data, *params_crecimiento)

plt.scatter(x_data, y_data, label='Datos')
plt.plot(x_data, y_pred_potencia, label='Potencia', color='red')
plt.plot(x_data, y_pred_crecimiento, label='Crecimiento', color='green')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.title('Ajuste de modelos')
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from sklearn.metrics import mean_squared_error, r2_score

# Modelo de ecuación de potencias: y = a * x^b
def potencia(x, a, b):
    return a * np.power(x, b)

# Modelo de razón de crecimiento: y = a * (1 + bx)
def crecimiento(x, a, b):
    return a * (1 + b * x)

def obtener_datos():
    num_datos = int(input("¿Cuántos pares de valores x e y tienes? "))
    x_data = []
    y_data = []
    for i in range(num_datos):
        x = float(input(f"Ingrese el valor de x-{i+1}: "))
        y = float(input(f"Ingrese el valor de y-{i+1}: "))
        x_data.append(x)
        y_data.append(y)
    return np.array(x_data), np.array(y_data)

x_data, y_data = obtener_datos()

params_potencia, _ = curve_fit(potencia, x_data, y_data)
params_crecimiento, _ = curve_fit(crecimiento, x_data, y_data)

y_pred_potencia = potencia(x_data, *params_potencia)
y_pred_crecimiento = crecimiento(x_data, *params_crecimiento)

plt.scatter(x_data, y_data, label='Datos')
plt.plot(x_data, y_pred_potencia, label='Potencia', color='red')
plt.plot(x_data, y_pred_crecimiento, label='Crecimiento', color='green')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.title('Ajuste de modelos')
plt.show()